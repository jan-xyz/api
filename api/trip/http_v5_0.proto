/**
* This file contains all protobuf definitions for trip-booking HTTP API.
* Current clients:
* - Passenger App Android
* - Passenger App iOS
*/

syntax = "proto3";

import "google/protobuf/wrappers.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";


package io.moia.protos.trip.tripbooking.http.v5;

/* * * * * * * * * * * * * * * * * * * * * *
 * Top level messages
 * * * * * * * * * * * * * * * * * * * * * */

/* ----------------------- /trip/inquire/ ----------------------- */

// A client inquires an estimate price and duration. A passenger count of one and timeOffset of NOW is assumed.
message InquireTrip {
  // Coordinates and street name (optional POI) of the place where the passenger starts walking towards the next virtual stop.
  NamedLocation origin = 1;
  // Coordinates and street name (optional POI) of the place where the passenger wants to go after being dropped off.
  NamedLocation destination = 2;
}

// Response to the trip inquiry.
message InquireTripResult {
  // ID of the Service area id that contains the requested coordinates.
  string serviceAreaId = 1;
  // Price of the ride
  Price price = 2;
  // The selected stop near the Origin for the vehicle to pick up the passenger(s).
  // The pickup stop is chosen by the system based on the origin, vehicle route, and system parameters.
  // The passenger(s) has to walk from the origin to the pickup stop.
  Stop pickupStop = 3;
  // The time window in which the vehicle should arrive at the pickup stop.
  TimeRange pickupTimeRange = 4;
  // The selected stop near the destination for the vehicle to deliver the passenger(s).
  // The delivery stop is chosen by the system based on the destination, vehicle route, and system parameters.
  // The passenger(s) has to walk from the delivery stop to the destination.
  Stop deliveryStop = 5;
  // The time window in which the vehicle should arrive to the delivery stop.
  TimeRange deliveryTimeRange = 6;
}

/* ----------------------- /trip/offer/ ----------------------- */

// A client requests an offer for a trip. The result of this request can be ordered / executed.
message RequestTrip {
  // Coordinates and street name (optional POI) of the place where the passenger starts walking towards the next virtual stop.
  NamedLocation origin = 1;
  // Coordinates and street name (optional POI) of the place where the passenger wants to go after being dropped off.
  NamedLocation destination = 2;
  // Number of seats in total and child seats contained in that number.
  SeatInfo seatInfo = 3;
  // The requested pre-booking time
  TimeOffset timeOffset = 4;
  // Name of the customer, shown in VGA and In-Vehicle-Display, only needed for Dispatching1 in Hannover
  google.protobuf.StringValue customerName = 5;

  enum TimeOffset {
    NOW = 0;
    MIN_5 = 5;
    MIN_10 = 10;
    MIN_20 = 20;
  }
}

// Response of the trip request.
// This object will be send with HTTP status code 200.
message RequestTripResult {
  // The proposed trip offer. This can be used to order a trip.
  // The id contained in this object will be the tripId, used for ordering, cancellation and feedback.
  Offer offer = 1;
  // The signature guarantees the integrity of the offer.
  string offerSignature = 2;
}

/* ----------------------- /trip/order/ ----------------------- */

// A client selected an offer and sends a request to purchase this offer.
message OrderTrip {
  // Contains the data of the offer as returned from the trip request.
  Offer offer = 1;
  // The signature guarantees the integrity of the offer.
  string offerSignature = 2;
  // The optional token generated by a PSP to identify the payment.
  google.protobuf.StringValue paymentNonce = 3;
  // Includes coupon information of used coupons.
  CouponInformation couponInformation = 4;

}

// Response of the order trip request. Includes information about the vehicle that will execute the trip and current estimates.
message OrderTripResult {
  // The vehicle that is currently planned to execute the trip. This might change, updates via IoT / webhooks.
  VehicleInfo vehicleInfo = 1;
  // The current estimates for pickup and delivery, updates arrive via IoT / webhooks.
  Schedule schedule = 2;
}

/* ----------------------- /trip/cancel/ ----------------------- */

// A client requests to cancel a trip.
message CancelTrip {
  // Identifies the trip
  string tripId = 1;
}

// Empty message to confirm the successful cancellation.
message CancelTripResult {
}

/* ----------------------- /trip/last/ ----------------------- */

// Successful response of a GET /trip/last endpoint.
// Contains the all information about last trip that has been purchased (its offer, vehicleInfo, latest schedule and its current state).
// The trip is either active or has been completed with a delivery or cancellation.
message LastTripResult {
  // The original offer (this includes the tripId).
  Offer offer = 1;
  // The chosen vehicle.
  VehicleInfo vehicleInfo = 2;
  // Trip latest pickup and delivery estimates if trip is not yet completed.
  Schedule latestSchedule = 3;
  // The current state of the trip. Enum contains only trip states between waiting-for-vehicle and completed, i.e. no offer or order rejections.
  TripState state = 4;
  // Feedback information needed when possibly displaying the last trip on the client side.
  FeedbackInformation feedbackInformation = 5;

  enum TripState {
    NONE = 0;
    // Trip has been successfully purchased but customer has not yet been picked up.
    TRIP_PURCHASED = 1;
    // Customer has been picked up by vehicle but not yet been delivered.
    PICKED_UP = 2;
    // Customer has been delivered by vehicle.
    DELIVERED = 3;
    // Trip has been canceled by the customer.
    CANCELED_BY_CUSTOMER = 4;
    // Trip has been canceled due to a NOT_SHOWN event.
    CANCELED_CUSTOMER_NOT_SHOWN = 5;
    // Trip has been canceled due to a VEHICLE_SERVICE_ABORTION event.
    CANCELED_VEHICLE_SERVICE_ABORTION = 6;
  }
}

/* ----------------------- /trip/feedback/ ----------------------- */

// A client creates feedback for a trip.
message CreateFeedback {
  // Identifies the trip to give feedback for.
  string tripId = 1;
  // Whether the feedback is positive or negative (thumb up/down).
  bool positive = 2;
  // The categories the customer wants to give feedback for.
  repeated string categoryIds = 3;
  // The actual feedback message (optional).
  google.protobuf.StringValue message = 4;
}

// The successful result of CreateFeedback.
message CreateFeedbackResult {
}

// Updates a feedback for a trip (identified by the tripId), must at least contain one categoryId and the message.
message UpdateFeedback {
  // Identifies the trip to give feedback for.
  string tripId = 1;
  // The categories the customer wants to give feedback for.
  repeated string categoryIds = 2;
  // The actual feedback message.
  google.protobuf.StringValue message = 3;
}

// Empty Message as result of a successful UpdateFeedback.
message UpdateFeedbackResult {
}

// Request the list of feedback categories.
message RequestFeedbackCategoriesResult {
  // The list of feedback categories.
  repeated FeedbackCategory categories = 1;
}

/* * * * * * * * * * * * * * * * * * * * * * * * *
 * Entities used inside of the wrapper objects
 * * * * * * * * * * * * * * * * * * * * * * * * */

// This object will be send with HTTP status code 400.
message TripError {
  // Error code. The object contains all possible error from trip-booking that can occur for all domain events.
  Code code = 1;
  // Error message. A human readable message that can hold more details and can be used for debugging.
  string message = 2;

  enum Code {
    NONE = 0;
    UNKNOWN = 1;

    // General Errors
    // An error occurred during the dispatching process.
    DISPATCHING_GENERAL_ERROR = 2;
    // An error occurred during payment process.
    PAYMENT_GENERAL_ERROR = 3;
    // An error occurred during couponing process.
    COUPON_GENERAL_ERROR = 30;
    // An internal error occurred during trip process.
    TRIP_GENERAL_ERROR = 32;

    // RequestTrip Errors
    // An error occurred during price calculation.
    PRICE_CALCULATION_FAILED = 4;
    // The requested ride time is not within the service hours.
    NOT_WITHIN_SERVICE_HOURS = 5;
    // No vehicle found.
    NO_VEHICLE_ELIGIBLE = 6;
    // No pickup stop found near the requested location.
    NO_PICKUP_STOPS_NEAR = 7;
    // No delivery stop found near the requested location.
    NO_DELIVERY_STOPS_NEAR = 8;
    // No pickup stop and no delivery stop found nea requested locations
    NO_PICKUP_AND_DELIVERY_STOPS_NEAR = 9;
    // A trip is already active for the given customer
    TRIP_ACTIVE = 31;
    // The service area is not known or not allowed for this user.
    UNKNOWN_SERVICE_AREA = 33;
    // There is no direct route between pickup stop and delivery stop.
    // This combines the Dispatching2 errors NO_DIRECT_ROUTE, NO_LOGICAL_ROUTE_POSSIBLE, NO_GEO_ROUTE_POSSIBLE and
    // UPDATE_VEHICLE_ROUTE_NOT_POSSIBLE
    NO_ROUTE_POSSIBLE = 34;

    // OrderTrip Errors
    // The selected offer has expired
    OFFER_EXPIRED = 10;
    // The selected vehicle is not reachable
    NO_VEHICLE_ACK = 11;
    // The selected vehicle has been rejected
    VEHICLE_REJECTED = 12;
    // No vehicles available in the service area.
    NO_VEHICLES_PROVISIONED = 35;
    // No vehicles active in the service area.
    NO_VEHICLES_ACTIVE = 36;
    // The payment amount is not in the acceptable range
    PAYMENT_INVALID_AMOUNT = 13;
    // The provided PSP nonce is not valid
    PAYMENT_INVALID_NONCE = 14;
    // The payment action cannot be processed due to an invalid state
    PAYMENT_INVALID_STATE = 15;
    // The payment action has been declined due to a general payment method error
    PAYMENT_OPTION_DECLINED_GENERAL = 16;
    // The payment method has insufficient funds
    PAYMENT_OPTION_INSUFFICIENT_FUNDS = 17;
    // The limit of the payment option has been exceeded
    PAYMENT_OPTION_LIMIT_EXCEEDED = 18;
    // The payment option is expired
    PAYMENT_OPTION_EXPIRED = 19;
    // Invalid data has been provided for the payment option
    PAYMENT_OPTION_INVALID_DATA = 20;
    // Invalid CVV has been provided for the payment option
    PAYMENT_OPTION_INVALID_CVV = 21;
    // Provided trip id does not belong to any trip.
    // Used when ordering a trip and get current active trip.
    TRIP_NOT_FOUND = 22;
    // Provided offer id does not belong to any offers for this trip
    OFFER_NOT_FOUND = 23;
    // Provided offer has been created for another customer
    TRIP_CUSTOMER_MISMATCH = 24;
    // Trip was created and an order has already been placed, with a different offer id than the one provided by current request
    OTHER_TRIP_OFFER_ALREADY_SELECTED = 25;
    // Cancellation of the trip was rejected because the trip is in a state where it cannot be cancelled not yet or no longer (response to CancelTrip only)
    CANCEL_REJECTED = 26;
    // Cancellation of the trip failed due to technical reasons (response to CancelTrip only)
    CANCEL_FAILED = 27;
    // Provided feedback was not found.
    FEEDBACK_NOT_FOUND = 28;
    // Feedback has already been created.
    FEEDBACK_ALREADY_GIVEN = 29;
  }
}

// Complete information needed to order and execute an offer.
message Offer {
  // The id of this specification, which will identify the created trip. This will become the tripId.
  string id = 1;
  // Service area id where the trip will be executed.
  string serviceAreaId = 2;
  // Number of seats in total and child seats contained in that number.
  SeatInfo seatInfo = 3;
  // Price of the ride.
  Price price = 4;
  // Coordinates and street name (optional POI) of the place where the passenger starts walking towards the next virtual stop.
  NamedLocation origin = 5;
  // The walk from the origin to the pickup stop, including duration and distance.
  Walk walkToPickup = 6;
  // The selected stop near the Origin for the vehicle to pick up the passenger(s).
  // The pickup stop is chosen by the system based on the origin, vehicle route, and system parameters.
  // The passenger(s) has to walk from the origin to the pickup stop.
  Stop pickupStop = 7;
  // The time window in which the vehicle should arrive at the pickup stop.
  TimeRange pickupTimeRange = 8;
  // The selected stop near the destination for the vehicle to deliver the passenger(s).
  // The delivery stop is chosen by the system based on the destination, vehicle route, and system parameters.
  // The passenger(s) has to walk from the delivery stop to the destination.
  Stop deliveryStop = 9;
  // The walk from the delivery stop to the destination
  Walk walkToDestination = 10;
  // The time window in which the vehicle should arrive to the delivery stop.
  TimeRange deliveryTimeRange = 11;
  // Coordinates and street name (optional POI) of the place where the passenger wants to go after being dropped off.
  NamedLocation destination = 12;
}

// The walking route, duration and distance from origin to pickup and delivery to destination.
message Walk {
  // Estimated duration for the walk.
  google.protobuf.Duration duration = 1;
  // Distance of the waling route in meters.
  float distance = 2;
  // Anchor points that define the walking route.
  repeated Location walkingPath = 3;
}

// Time window in which the pickup or delivery can occur.
message TimeRange {
  // Start of acceptable pickup or delivery window.
  google.protobuf.Timestamp start = 1;
  // End of acceptable pickup or delivery window.
  google.protobuf.Timestamp end = 2;
}

// The price of a ride.
message Price {
  // The total amount, e.g. 5.85
  string amount = 1;
  // The 3-digit currency code for the price, e.g. EUR
  string currency = 2;
}

// A Location combined with its localized address
message NamedLocation {
  // The location as lat and lon
  Location location = 1;
  // Street name and number, used for trip-history and domain events.
  string primaryAddress = 2;
  // Secondary address line, usually containing zip code and city, might also contain the country.
  google.protobuf.StringValue secondaryAddress = 3;
  // The name of a point of interest (e.g. Hamburg Airport).
  google.protobuf.StringValue primaryPoiName = 4;
  // Additional information for a point of interest (e.g. City, Country).
  google.protobuf.StringValue secondaryPoiName = 5;
}

// A location consisting of lat and lon.
message Location {
  // Latitude (as angular distance from the equator), Min-Value = -90, Max-Value = +90
  double lat = 1;
  // Longitude (as angular distance from the Prime Meridian), Min-Value = -180, Max-Value = +180.
  double lon = 2;
}

// Information about a virtual stop.
message Stop {
  // Identifier provided by the service area management.
  string id = 1;
  // Human readable name of the stop in different languages (abbrev. as ISO 639-1 (two-letter abbreviations)).
  map<string, string> name = 2;
  // Location of the stop accessible by a human.
  Location displayLocation = 3;
}

// Seat constellation.
message SeatInfo {
  // Total amount of seats.
  int32 seats = 1;
  // Thereof child transportation seats.
  int32 childSeats = 2;
}

// Total reduction and identifiers of all used coupons.
message CouponInformation {
  // Total amount of price reduction.
  Price totalReduction = 1;
  // List of used coupon identifiers.
  repeated string couponIds = 2;
}

message VehicleInfo {
  // The vehicle identifier.
  string id = 1;
  // A human-readable vehicle label.
  string label = 2;
}

message Schedule {
  // Expected time when the vehicle will be at the pickup point.
  google.protobuf.Timestamp pickup = 1;
  // Expected time when the vehicle will be at the delivery point.
  google.protobuf.Timestamp delivery = 2;
}

// A feedback category entry, containing an id and a map with a language key and a text to display.
message FeedbackCategory {
  // The category id.
  string id = 1;
  // The category name. Key is a locale, e.g. 'de', 'en'
  map<string, string> name = 2;
}

// Feedback information needed when possibly displaying the last trip on the client side.
message FeedbackInformation {
  // Whether the feedback is positive or negative (thumb up/down).
  bool positive = 1;
  // The feedback categories the customer selected. Empty if no categories have been selected.
  repeated string categoryIds = 2;
  // The optional feedback message.
  google.protobuf.StringValue message = 3;
}
