/**
* This file contains all protobuf definitions for trip-booking HTTP API.
* Current clients:
* - Passenger App Android
* - Passenger App iOS
*/

syntax = "proto3";

import "google/protobuf/wrappers.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";


package io.moia.protos.trip.tripbooking.http.v5;

/* * * * * * * * * * * * * * * * * * * * * *
 * Top level messages
 * * * * * * * * * * * * * * * * * * * * * */

// Client requests an uncommitted trip for one passenger.s
message RequestUncommittedTrip {
  // The place where the passenger of a trip want to depart from. The origin is the start point the customer has defined, containing the geo coordinates, the address and optional name of the point of interest.
  NamedLocation origin = 1;
  // The place where the passenger of a trip want to go to. The destination is the end point the customer has defined, containing the geo coordinates, the address and optional name of point of interest.
  NamedLocation destination = 2;
}

// Response of the uncommitted trip enquiry.
message RequestUncommittedTripResult {
  // The uncommitted trip offers. At least one uncommitted offer is returned.
  repeated UncommittedOffer uncommittedOffers = 1;
}

// The result object
message UncommittedOffer {
  // Estimated price of the ride
  Price estimatedPrice = 1;
  // The ride schedule
  Schedule schedule = 2;
  // Directions how to navigate to and from the stops
  Directions directions = 3;
}

// Customer request trip offers
message RequestTrip {
  // The place where the Passenger(s) of a trip want to depart from. The origin is the start point the customer has defined, containing the geo coordinates, the address and optional name of the point of interest.
  NamedLocation origin = 1;
  // The place where the Passenger(s) of a trip want to go to. The destination is the end point the customer has defined, containing the geo coordinates, the address and optional name of point of interest.
  NamedLocation destination = 2;
  // Number of passengers
  Passengers passengers = 3;

  enum TimeOffset {
    NOW = 0; // default for previous versions
    MIN_5 = 5;
    MIN_10 = 10;
    MIN_20 = 20;
  }
  // The requested pre-booking time
  TimeOffset timeOffset = 4;
}

// Response of the trip request.
// This object will be send with HTTP status code 200.
message RequestTripResult {
  // The proposed trip offers. At least one offer is returned.
  repeated SignedOffer offers = 1;
}

// Customer selected an offer and sends a request to purchase this offer.
message OrderTrip {
  // Contains the data of the offer as returned for the trip request.
  SignedOffer offer = 1;
  // The name of the customer.
  string customerName = 2;
  // The token generated by a PSP to identifies the payment.
  string paymentNonce = 3;
  // Includes coupon information of used coupons.
  CouponInformation couponInformation = 4;
}

// Response of the order trip request. The selected offer is purchased.
message OrderTripResult {
  // Contains additional information of the trip.
  TripInformation tripInformation = 1;
}

// A cancel request coming from the mobile client.
message CancelTrip {
  // Identifies the trip.
  string planId = 1;
}

// Empty message to confirm the successful cancellation.
message CancelTripResult {}

// Successful response of a GET /trip/last endpoint.
// Contains the last trip that has been purchased.
// The trip is either active or has been completed with a delivery or cancellation.
message TripResult {
  // Identifies the trip.
  string planId = 1;
  // The service class. Currently set to arbitary value of 'economy-id'.
  string serviceClassId = 2;

  enum TripState {
    NONE = 0;
    // Trip has been successfully purchased but customer has not yet been picked up.
    TRIP_PURCHASED = 1;
    // Customer has been picked up by vehicle but not yet been delivered.
    PICKED_UP = 2;
    // Customer has been delivered by vehicle.
    DELIVERED = 3;
    // Trip has been canceled by the customer.
    CANCELED_BY_CUSTOMER = 4;
    // Trip has been canceled due to a NOT_SHOWN event.
    CANCELED_CUSTOMER_NOT_SHOWN = 5;
    // Trip has been canceled due to a VEHICLE_SERVICE_ABORTION event.
    CANCELED_VEHICLE_SERVICE_ABORTION = 6;
  }
  // The current state of the trip. Enum contains only trip states between waiting-for-vehicle and completed, i.e. no offer or order rejections.
  TripState state = 3;

  // Price of the ride. Consideres coupon reduction.
  Price price = 4;
  // The ride schedule.
  Schedule schedule = 5;
  // Directions how to navigate to and from the stops.
  Directions directions = 6;
  // Vehicle information.
  VehicleInfo vehicleInfo = 7;
  // A series of waypoints containing the currently planned route for the vehicle.
  // The first waypoint represents the route from the current vehicle location to the next stop.
  repeated Waypoint vehicleRoute = 8;
  // Feedback information needed when possibly displaying the last trip on the client side.
  FeedbackInformation feedbackInformation = 9;
}


// Customer creates a feedback for a trip.
message CreateFeedback {
  // Identifies the trip to give feedback for.
  string planId = 1;
  // Weather the feedback is positive or not (thumb up/down).
  bool positive = 2;
  // The categories the customer wants to give feedback for.
  repeated string categoryIds = 3;
  // The actual feedback message.
  google.protobuf.StringValue message = 4;
}

// The successful result of CreateFeedback, containing the feedback id.
message CreateFeedbackResult {
  // Unique identifier of the feedback.
  string feedbackId = 1;
}

// Updates a feedback by its feedbackId, must at least contain one categoryId and the message.
message UpdateFeedback {
  // The categories the customer wants to give feedback for.
  repeated string categoryIds = 1;
  // The actual feedback message.
  google.protobuf.StringValue message = 2;
}

// Empty Message as result of a successful UpdateFeedback.
message UpdateFeedbackResult {}

// Request the list of feedback categories.
message RequestFeedbackCategoriesResult {
  // The list of feedback categories.
  repeated FeedbackCategory categories = 1;
}

/* * * * * * * * * * * * * * * * * * * * * * * * *
 * Entities used inside of the wrapper objects
 * * * * * * * * * * * * * * * * * * * * * * * * */

// This Object will be send with HTTP status code 400
message TripError {
  enum Code {
    NONE = 0;
    UNKNOWN = 1;

    // General Errors
    // An error occurred during the dispatching process
    DISPATCHING_GENERAL_ERROR = 2;
    // An error occurred during payment process
    PAYMENT_GENERAL_ERROR = 3;
    // An error occured during couponing process
    COUPON_GENERAL_ERROR = 30;
    // An internal error occured during trip process
    TRIP_GENERAL_ERROR = 32;

    // RequestTrip Errors
    // An error occured during price calculation
    PRICE_CALCULATION_FAILED = 4;
    // The requested ride time is not within the service hours
    NOT_WITHIN_SERVICE_HOURS = 5;
    // No vehicle found
    NO_VEHICLE_ELIGIBLE = 6;
    // No pickup stop found near the requested location
    NO_PICKUP_STOPS_NEAR = 7;
    // No delivery stop found near the requested location
    NO_DELIVERY_STOPS_NEAR = 8;
    // No pickup stop and no delivery stop found nea requested locations
    NO_PICKUP_AND_DELIVERY_STOPS_NEAR = 9;
    // A trip is already active for the given customer
    TRIP_ACTIVE = 31;

    // OrderTrip Errors
    // The selected offer has expired
    OFFER_EXPIRED = 10;
    // The selected vehicle is not reachable
    NO_VEHICLE_ACK = 11;
    // The selected vehicle has been rejected
    VEHICLE_REJECTED = 12;
    // The payment amount is not in the acceptable range
    PAYMENT_INVALID_AMOUNT = 13;
    // The provided PSP nonce is not valid
    PAYMENT_INVALID_NONCE = 14;
    // The payment action cannot be processed due to an invalid state
    PAYMENT_INVALID_STATE = 15;
    // The payment action has been declined due to a general payment method error
    PAYMENT_OPTION_DECLINED_GENERAL = 16;
    // The payment method has insufficient funds
    PAYMENT_OPTION_INSUFFICIENT_FUNDS = 17;
    // The limit of the payment option has been exceeded
    PAYMENT_OPTION_LIMIT_EXCEEDED = 18;
    // The payment option is expired
    PAYMENT_OPTION_EXPIRED = 19;
    // Invalid data has been provided for the payment option
    PAYMENT_OPTION_INVALID_DATA = 20;
    // Invalid CVV has been provided for the payment option
    PAYMENT_OPTION_INVALID_CVV = 21;
    // Provided trip id does not belong to any trip.
    // Used when ordering a trip and get current active trip.
    TRIP_NOT_FOUND = 22;
    // Provided offer id does not belong to any offers for this trip
    OFFER_NOT_FOUND = 23;
    // Provided offer has been created for another customer
    TRIP_CUSTOMER_MISMATCH = 24;
    // Trip was created and an order has already been placed, with a different offer id than the one provided by current request
    OTHER_TRIP_OFFER_ALREADY_SELECTED = 25;
    // Cancellation of the trip was rejected because the trip is in a state where it cannot be cancelled not yet or no longer (response to CancelTrip only)
    CANCEL_REJECTED = 26;
    // Cancellation of the trip failed due to technical reasons (response to CancelTrip only)
    CANCEL_FAILED = 27;
    // Provided feedback was not found.
    FEEDBACK_NOT_FOUND = 28;
    // Feedback has already been created.
    FEEDBACK_ALREADY_GIVEN = 29;
  }

  // Error code. The object contains all possible error from trip-booking that can occur for all domain events.
  Code code = 1;
  // Error message. A human readable message that can hold more details and can be used for debugging.
  string message = 2;
}

// Combines an offer specification with a signature to validate it.
message SignedOffer {
  // Contains the offer specification.
  Offer offer = 1;
  // Contains the crypto hash to verify the offer.
  bytes signature = 2;

  message Offer {
    // Identifies the offer.
    string planId = 1;
    // Price of the ride.
    Price price = 2;
    // The service class. Currently set to arbitrary value of 'economy-id'.
    string serviceClassId = 3;
    // Describes the number of passengers.
    Passengers passengers = 4;
    // The ride schedule.
    Schedule schedule = 5;
    // Directions how to navigate to and from the stops.
    Directions directions = 6;
  }
}

// The price of a ride.
message Price {
  // deleted: string taxRate = 2
  reserved 2;
  // The total amount, e.g. 5.85
  string amount = 1;
  // The 3-digit currency code for the price, e.g. EUR
  string currency = 3;
}


// The ride schedule
message Schedule {
  // Actual time duration of a specific ride.
  google.protobuf.Duration rideDuration = 1;
  // The moment of time when a passenger is indicated to be picked up from the pickup stop, according to a trip offer.
  google.protobuf.Timestamp pickupTime = 2;
  // The moment of time when a passenger is approximately delivered to the delivery stop, according to the trip offer.
  // A time window can be displayed by using `deliveryTime` to `latestDeliveryTime`.
  google.protobuf.Timestamp deliveryTime = 3;
  // The moment of time when a passenger is at latest delivered to the delivery stop.
  // A time window can be displayed by using `deliveryTime` to `latestDeliveryTime`.
  google.protobuf.Timestamp latestDeliveryTime = 4;
}


// A Location combined with its localized address
message NamedLocation {
  // The location as lat and lon
  Location location = 1;
  // Street name and number
  string primaryAddress = 2;
  // Secondary address line, usually containing zip code and city, might also contain the country
  google.protobuf.StringValue secondaryAddress = 3;
  // The name of a point of interest ( e.g. Hamburg Airport)
  google.protobuf.StringValue primaryPoiName = 4;
  // Additional information for a point of interest (e.g. City, Country)
  google.protobuf.StringValue secondaryPoiName = 5;
}

// A location consisting of lat and lon.
message Location {
  // Latitude is the angular distance of a place north or south of the earth's equator, or of the equator of a celestial object, usually expressed in degrees and minutes. Min-Value = -90, Max-Value = +90
  double lat = 1;
  // Longitude is the angular distance of a place east or west of the earth's equator, or of the equator of a celestial object, usually expressed in degrees and minutes. Min-Value = -180, Max-Value = +180.
  double lon = 2;
}

// A walking path contains geographic information how to walk from or to a stop.
message WalkingPath {
  // The list of location samples.
  repeated Location samples = 1;
  // The overall length of the walking path in meters.
  float distance = 2;
  // The estimated duration for the walking path.
  google.protobuf.Duration duration = 3;
}

// A waypoint represents a stop and includes the route from the previous stop to itself.
message Waypoint {
  // The waypoint id.
  string id = 1;
  // The stop that this waypoint represents.
  Stop stop = 2;
  // Route from previous stop to this stop.
  repeated Location geoRouteFromPrevious = 3;
}

// Directions how to navigate to and from the stops.
message Directions {
  // The place where the Passenger(s) of a Trip want to depart from. The Origin is the geo coordinates of the start point the customer has defined.
  NamedLocation origin = 1;
  // The selected stop near the Origin for the vehicle to pick up the passenger(s).
  // The pickup stop can be chosen by the system based on the origin, vehicle route, and system parameters.
  // The passenger(s) has to walk from the origin to the pickup stop.
  Stop pickupStop = 2;
  // The selected stop near the destination for the vehicle to deliver the passenger(s).
  // The delivery stop can be chosen by the system based on the destination, vehicle route, and system parameters.
  // The passenger(s) has to walk from the delivery stop to the destination.
  Stop deliveryStop = 3;
  // The place where the Passenger(s) of a Trip want to go to. The Destination is defined by the Trip Customer e.g. by the street address or the name of the place.
  NamedLocation destination = 4;
  // The path from the origin location to the pickup stop location.
  WalkingPath originWalkingPath = 5;
  // The path from the delivery stop location to the customers destination location.
  WalkingPath destinationWalkingPath = 6;
}

// A stop consisting of the stop id, location and the name in all supported languages.
message Stop {
  // The stop id.
  string id = 1;
  // The stop name. Key is 2-digit locale, e.g. 'de', 'en'
  map<string, string> name = 2;
  // The stop location.
  Location location = 3;
}

// Passengers consisting of number of adults.
message Passengers {
  // Number of adults. Min-Value = 1, Max-Value = 5. If infants is greater than 0, the Max-Value is reduced accordingly.
  int32 adults = 1;
  // Number of infants. Min-Value = 0, Max-Value = 2.
  int32 infants = 2;
}

// Contains additional information of the trip.
message TripInformation {
  // Vehicle information.
  VehicleInfo vehicleInfo = 1;
  // A series of waypoints containing the currently planned route for the vehicle.
  // The first waypoint represents the route from the current vehicle location to the next stop.
  repeated Waypoint initialVehicleRoute = 2;
}

// Total reduction and identifiers of all used coupons.
message CouponInformation {
  // Total amount of price reduction.
  Price totalReduction = 1;
  // List of used coupon identifiers.
  repeated string couponIds = 2;
}

// Vehicle information.
message VehicleInfo {
  // The vehicle identifier.
  string id = 1;
  // A human-readable vehicle label.
  string label = 2;
}

// A feedback category entry, containing an id and a map with a language key and a text to display.
message FeedbackCategory {
  // The category id.
  string id = 1;
  // The category name. Key is 2-digit locale, e.g. 'de', 'en'
  map<string, string> name = 2;
}

// Feedback information needed when possibly displaying the last trip on the client side.
message FeedbackInformation {
  // Unique identifier of the feedback.
  string feedbackId = 1;
  // Weather the feedback is positive or not (thumb up/down).
  bool positive = 2;
  // The feedback categories the customer selected. Empty if no categories have been selected.
  repeated string categoryIds = 3;
  // The optional feedback message.
  google.protobuf.StringValue message = 4;
}

